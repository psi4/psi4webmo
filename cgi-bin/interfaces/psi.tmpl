Molecular Energy
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}


[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

[%IF method == "dft" -%]e, wfn = energy('$functional' return_wfn=True)
[%ELSE-%]e, wfn = energy('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
SAPT
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

auto_fragments('')

set basis $basisSet
[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

e, wfn = energy('$method', return_wfn=True)
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
===================================
Geometry Optimization
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

mol.update_geometry()
mol.symmetrize(1e-3)

[%IF method == "dft" -%]e, wfn = optimize('$functional' return_wfn=True)
[%ELSE-%]e, wfn = optimize('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
Transition State Optimization
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]
set opt_type ts
[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

mol.update_geometry()
mol.symmetrize(1e-3)

[%IF method == "dft" -%]e, wfn = optimize('$functional', return_wfn=True)
[%ELSE-%]e, wfn = optimize('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
Vibrational Frequencies
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]


[%IF method == "dft" -%]e, wfn =frequencies('$functional', return_wfn=True)
[%ELSE-%]e, wfn = frequencies('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
Optimize and Frequencies
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

mol.update_geometry()
mol.symmetrize(1e-3)

[%IF method == "dft" -%]e, wfn = optimize('$functional', return_wfn=True)
[%ELSE-%]e, wfn = optimize('$method', return_wfn=True)\n[%END-%]
[%IF method == "dft" -%]e, wfn = frequencies('$functional', return_wfn=True)
[%ELSE-%]e, wfn = frequencies('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
Molecular Orbitals 
memory 1024 mb

molecule mol {
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]
set MOLDEN_WRITE true
set WRITER_FILE_LABEL output
set print_mos true

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]


[%IF method == "dft" -%]e, wfn = energy('$functional' return_wfn=True)
[%ELSE-%]e, wfn = energy('$method', return_wfn=True)\n[%END-%]
oeprop(wfn, "MULLIKEN_CHARGES")
mol.print_out()
print_variables()
========================================
Coordinate Scan
memory 1024 mb

molecule webmoMolecule{
[%IF multiplicity == "" -%]$charge 1
[%ELSE-%]$charge $multiplicity\n[%END-%]
$geometry

[%IF enableSymmetry-%]
[%ELSE-%]symmetry c1\nno_com\nno_reorient\n[%END-%]
}

[%IF method == "ccsd" OR method == "ccsd(t)" OR method == "mp4"-%]set scf_type pk
[%ELSE-%]set scf_type df\n[%END-%]
set basis $basisSet
[%IF method == "mp4" AND reference == 'uhf' -%]set reference rohf
[%ELSIF functional == '' -%]set reference $reference
[%ELSIF reference == "rhf" -%]set reference rks
[%ELSIF reference == "rohf" -%]set reference roks
[%ELSIF reference == "uhf" -%]set reference uks[%END-%]

[%IF additionalKeywords != "" -%]$additionalKeywords[%END-%]

[%IF dimScanned == 1-%]
s1vals = [x*$scanInc+$scanStart for x in range(int(round(abs($scanStop-$scanStart)/$scanInc))+1)]
result_table = Table(rows=("Values"),cols=("Energies"))
for value in s1vals:
  webmoMolecule.$scanVar = value
[%IF method == "dft" -%]  result_table[value] = energy('$functional')
[%ELSE-%]  result_table[value] = energy('$method')\n[%END-%]
[%END-%]
[%IF dimScanned == 2-%]
result_table = Table(rows=("Values"), cols=("Energies"))
s1vals = [x*$scanInc+$scanStart for x in range(int(round(abs($scanStop-$scanStart)/$scanInc))+1)]
s2vals = [x*$scanInc2+$scanStart2 for x in range(int(round(abs($scanStop2-$scanStart2)/$scanInc2))+1)]
for value in s1vals:
  webmoMolecule.$scanVar = value
  for value2 in s2vals:
    webmoMolecule.$scanVar2 = value2
[%IF method == "dft" -%]    result_table[value][value2] = energy('$functional')
[%ELSE-%]    result_table[value][value2] = energy('$method')\n[%END-%]

[%END-%]
print_out(str(result_table))
========================================
